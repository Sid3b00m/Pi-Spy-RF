#!/bin/bash

# Full Deployable Radio Scanner Setup Script for Raspberry Pi or Ubuntu Laptop
# Based on Chasing-Your-Tail-NG[](https://github.com/ArgeliusLabs/Chasing-Your-Tail-NG)
# Integrates WiFi surveillance detection with broad-spectrum SDR scanning (120-950 MHz)
# Supports RTL-SDR v3/v4 and HackRF One
# Detects/decodes digital transmissions (e.g., POCSAG, FLEX) and shows analog voice signals (e.g., FM/AM demod)
# Added: NOAA Weather Radio decoding (SAME alerts and voice) on 162 MHz band
# Added: NOAA Satellite APT decoding on 137 MHz band - decodes satellite weather images
# Added: Doppler correction for APT images using slant correction via sync alignment
#
# Limitations:
# - HackRF APT decoding is partial (IQ capture works, but full FM demod requires GNU Radio or similar; placeholder used).
# - For full satellite passes, increase record_duration (e.g., 600s for 10min).
# - Ensure SDR hardware is connected and drivers installed.
#
# Usage:
# 1. Save this as setup_scanner.sh
# 2. chmod +x setup_scanner.sh
# 3. ./setup_scanner.sh --install  (for initial setup)
# 4. ./setup_scanner.sh --run      (to start scanning)
# 5. ./setup_scanner.sh --hackrf   (use HackRF instead of RTL-SDR)

set -e  # Exit on error

# Configuration variables
PROJECT_DIR="$HOME/cytng_scanner"
CYT_REPO="https://github.com/ArgeliusLabs/Chasing-Your-Tail-NG.git"
KISMET_DB_PATH="/var/log/kismet/*.kismet"  # Adjust as needed
CONFIG_JSON="$PROJECT_DIR/config.json"
LOG_FILE="$PROJECT_DIR/scanner.log"
FREQ_START=120000000  # 120 MHz
FREQ_END=950000000    # 950 MHz
SAMPLE_RATE=2400000   # 2.4 MS/s
GAIN=20
SCAN_STEP=1000000     # 1 MHz steps
THRESHOLD_DB=-50      # Signal detection threshold

# NOAA specific
NOAA_FREQS=(162400000 162425000 162450000 162475000 162500000 162525000 162550000)
NOAA_APT_FREQS=(137100000 137620000 137912500)  # NOAA-19, NOAA-15, NOAA-18

# Function to install dependencies
install_deps() {
    echo "Installing system dependencies..."
    sudo apt update
    sudo apt install -y git python3 python3-pip sqlite3 libusb-1.0-0-dev rtl-sdr sox multimon-ng kismet pandoc unzip curl
    # For HackRF support
    if [ "$1" == "--hackrf" ]; then
        sudo apt install -y hackrf libhackrf-dev
    fi
    
    echo "Installing noaa-apt for APT decoding..."
    ARCH=$(uname -m)
    if [ "$ARCH" == "aarch64" ]; then
        DOWNLOAD_URL="https://github.com/martinber/noaa-apt/releases/latest/download/noaa-apt-linux-aarch64-unknown-gnu.zip"
    elif [ "$ARCH" == "x86_64" ]; then
        DOWNLOAD_URL="https://github.com/martinber/noaa-apt/releases/latest/download/noaa-apt-linux-x86_64-unknown-gnu.zip"
    else
        echo "Unsupported architecture for noaa-apt: $ARCH"
        exit 1
    fi
    curl -L $DOWNLOAD_URL -o noaa-apt.zip
    unzip noaa-apt.zip -d noaa-apt
    sudo mv noaa-apt/noaa-apt /usr/local/bin/
    rm -rf noaa-apt noaa-apt.zip
    
    echo "Cloning CYT-NG project..."
    mkdir -p "$PROJECT_DIR"
    cd "$PROJECT_DIR"
    git clone "$CYT_REPO" . || echo "Repo already cloned"
    
    echo "Installing Python dependencies..."
    pip3 install -r requirements.txt || echo "Requirements installed"
    pip3 install pyrtlsdr numpy scipy cryptography
    
    # Setup secure config (migrate credentials)
    python3 migrate_credentials.py || true
    
    # Create basic config.json if missing
    if [ ! -f "$CONFIG_JSON" ]; then
        cat > "$CONFIG_JSON" << EOL
{
  "paths": {
    "kismet_db": "$KISMET_DB_PATH",
    "ignore_lists": {
      "mac": "mac_ignore_list.json",
      "ssid": "ssid_ignore_list.json"
    }
  },
  "timing": {
    "time_windows": {
      "recent": 5,
      "medium": 10,
      "old": 15,
      "oldest": 20
    }
  }
}
EOL
    fi
    
    # Blacklist RTL-SDR kernel modules to avoid conflicts
    echo "blacklist dvb_usb_rtl28xxu" | sudo tee /etc/modprobe.d/rtl-sdr-blacklist.conf
    sudo rmmod dvb_usb_rtl28xxu rtl2832 || true
    
    echo "Setup complete! Run with --run"
}

# Function to run the scanner
run_scanner() {
    cd "$PROJECT_DIR"
    
    # Start Kismet in background if not running
    if ! pgrep -f kismet > /dev/null; then
        echo "Starting Kismet..."
        sudo kismet -c wlan1 --daemonize  # Assumes wlan1 for WiFi monitoring
    fi
    
    # Python script for integrated scanning
    python3 - << 'EOF'
import sys
import time
import logging
import subprocess
import numpy as np
from rtlsdr import RtlSdr  # For RTL-SDR
from scipy import signal
from scipy.ndimage import shift as nd_shift
import matplotlib.pyplot as plt
from datetime import datetime
from secure_database import SecureKismetDB, create_secure_db_connection
from surveillance_detector import SurveillanceDetector, load_appearances_from_kismet
from secure_credentials import secure_config_loader
from secure_main_logic import SecureCYTMonitor
from secure_ignore_loader import load_ignore_lists

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler('scanner.log'), logging.StreamHandler()])
logger = logging.getLogger(__name__)

class RadioScanner:
    def __init__(self, config_path, use_hackrf=False):
        self.config, _ = secure_config_loader(config_path)
        self.ignore_macs, self.ignore_ssids = load_ignore_lists(self.config)
        self.db = create_secure_db_connection(self.config['paths']['kismet_db'])
        self.monitor = SecureCYTMonitor(self.config, self.ignore_macs, self.ignore_ssids, open('cyt_log.txt', 'a'))
        self.detector = SurveillanceDetector(self.config)
        self.sdr = None
        self.use_hackrf = use_hackrf
        self.freq_start = 120e6
        self.freq_end = 950e6
        self.sample_rate = 2.4e6
        self.gain = 20.0
        self.scan_step = 1e6
        self.threshold_db = -50
        self.noaa_freqs = [162.400e6, 162.425e6, 162.450e6, 162.475e6, 162.500e6, 162.525e6, 162.550e6]
        self.noaa_apt_freqs = [137.100e6, 137.620e6, 137.9125e6]  # Common NOAA APT frequencies
    
    def init_sdr(self):
        if self.use_hackrf:
            # Test HackRF presence
            subprocess.run(["hackrf_info"], capture_output=True, check=True)
            logger.info("Using HackRF")
        else:
            self.sdr = RtlSdr()
            self.sdr.sample_rate = self.sample_rate
            self.sdr.gain = self.gain
            logger.info("Using RTL-SDR")
    
    def scan_spectrum(self):
        detections = []
        current_freq = self.freq_start
        while current_freq < self.freq_end:
            if self.use_hackrf:
                # Use hackrf_sweep for spectrum scan
                cmd = f"hackrf_sweep -f {int(current_freq/1e6)}:{int((current_freq+self.scan_step)/1e6)} -w {int(self.sample
